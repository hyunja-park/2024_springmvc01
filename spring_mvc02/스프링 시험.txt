DI는 객체 간 의존 관계를 느슨하게 결합하는 설계 원칙 중 하나로 스프링에서 주로 사용되는 디자인 패턴 중 하나 이다. 
이러한 DI는 객체 간의 의존 관계를 코드 내에 명시적으로 생성하는 대신 외부에서 객체를 생성하고 전달하여 객체 간의 
결합도를 줄이는 방식을 택한다.

Spring은 3가지 핵심 프로그래밍 모델(AOP, DI, IOC)을 지원하는데, 그 중 하나가 바로
의존 관계 주입(Dependency Injection)입니다. 그리고 Spring은 객체의 의존 관계를 의존 관계 주입을 통해 관리합니다.
DI는 외부에서 객체 간의 관계(의존성)를 결정해 주는데 즉, 객체를 직접 생성하는 것이 아니라 외부에서 생성 후 주입시켜 주는 방식이라 할 수 있다.
DI를 통해 객체 간의 관계를 동적으로 주입하여 유연성을 확보하고 결합도를 낮출 수 있다.

[ Spring DI 3가지 방법 ]

Construct Injection(생성자 주입)
현재 가장 권장되는 의존 관계 주입 방식이다.

Field Injection(필드 주입)
생성자 주입을 뺀 나머지(필드 주입, Setter 주입)은 모두 생성자 이후에 호출되므로, 필드에 final 키워드를 사용할 수 없다.

Setter Injection(Setter 주입)
생성자 주입을 뺀 나머지(필드 주입, Setter 주입)은 모두 생성자 이후에 호출되므로, 필드에 final 키워드를 사용할 수 없다.


2
Spring 프레임워크에서는 설정을 통해 애플리케이션의 각 컴포넌트, 서비스, 데이터베이스, 그리고 다양한 환경설정을 관리합니다. 
이러한 설정은 주로 XML, Java, 그리고 최근에는 어노테이션 기반의 구성을 통해 이루어집니다. 

1. XML 설정
초기 Spring에서는 XML 파일을 통해 빈(bean) 정의, 의존성 주입, 데이터베이스 연결 등을 설정하는 방법을 사용했습니다. 
XML 설정 방식은 아직도 많은 곳에서 사용되며, 주로 applicationContext.xml이라는 이름의 파일을 사용합니다.

빈 설정: <bean> 태그를 통해 객체(빈)을 정의하고 의존성을 주입합니다.
데이터베이스 설정: DataSource, TransactionManager 등 데이터베이스 관련 설정을 XML로 정의할 수 있습니다.
AOP 설정: <aop:config> 태그를 통해 AOP(Aspect Oriented Programming)를 설정할 수 있습니다.

2. Java 설정 (Java-based Configuration)
Spring 3부터는 XML 설정 대신 Java 클래스를 통해 구성할 수 있는 기능이 추가되었습니다. 
설정 클래스에는 @Configuration 어노테이션을 사용하며, 빈은 @Bean 어노테이션을 사용해 정의합니다.

클래스 기반 설정: @Configuration으로 지정된 클래스는 설정 정보를 포함하는 클래스로 간주되며, 이를 통해 XML 없이도 빈을 정의할 수 있습니다.
빈 정의: 메서드에 @Bean 어노테이션을 추가해 빈을 정의하고, 메서드의 리턴 객체가 빈으로 등록됩니다.
환경 설정: @PropertySource 어노테이션을 통해 외부 파일(예: .properties 파일)을 가져와서 설정할 수 있습니다.

3. 어노테이션 기반 설정 (Annotation-based Configuration)
Spring 2.5부터 도입된 어노테이션 기반 설정은 빈 자동 검색 및 주입을 가능하게 합니다.

@Component 스캔: @Component, @Service, @Repository, @Controller 등의 어노테이션이 붙은 클래스들은 자동으로 스프링 빈으로 등록됩니다.
의존성 주입: @Autowired를 통해 의존성을 주입하며, 이는 빈을 자동으로 연결해줍니다.
스테레오타입 어노테이션: @Service, @Repository, @Controller 등으로 계층별로 역할을 명시할 수 있습니다.

4. 외부 환경 설정 (Environment and Profiles)
Spring에서는 환경 별 설정(Profile)을 지원하여, 예를 들어 dev, test, prod 환경에 따라 다른 설정을 적용할 수 있습니다.

프로파일 설정: @Profile 어노테이션을 사용하여 특정 환경에서만 적용할 설정을 정의할 수 있습니다.
외부 설정 파일: application.properties 또는 application.yml 파일을 통해 데이터베이스, 포트, 로그 레벨 등 
환경별 설정을 쉽게 관리할 수 있습니다.

5. Spring Boot 설정
Spring Boot에서는 자동 구성 기능이 강화되어 개발자가 많은 설정을 하지 않아도 됩니다. 
기본적으로 application.properties 또는 application.yml 파일을 사용하여 설정을 관리합니다. 
주요 설정 파일로는 application.properties 또는 application.yml을 사용하며, 이를 통해 애플리케이션 포트, 
데이터베이스 연결, 보안 등의 환경을 설정할 수 있습니다.

Spring의 설정 방법은 이처럼 다양한 방법을 지원하여 개발자의 편의성과 애플리케이션의 유연성을 제공합니다.


3
 Spring Bean이란 ?
Spring Bean은 Spring IoC 컨테이너가 관리하는 자바 객체로서 컨테이너에 의해 생명주기가 관리되는 객체를 의미한다. 
IoC 컨테이너 안에 들어있는 객체로 필요할 때마다 IoC 컨테이너에서 가져와서 사용한다.
어노테이션인 @Bean을 사용하거나 xml 설정을 통해 일반 객체를 Bean으로 등록이 가능하다.
 즉, Spring 에서는 Bean은 ApplicationContext가 알고 있는 객체이며 ApplicationContext가 생성하고 직접 관리해주는 객체를 의미한다.

<!-- 간단한 빈 정의 -->
<bean id="..." class="..."></bean>

<!-- scope와 함께 빈 정의 -->
<bean id="..." class="..." scope="singleton"></bean>

<!-- property와 함께 빈 정의 -->
<bean id="..." class="...">
	<property name="beaninit" value="Hello World!"/>
</bean>

<!-- 초기와 메소드와 함께 빈 정의 -->
<bean id="..." class="..." init-method="..."></bean>


4. 
1. Dispatcher Srevlet
2. ModelAndView
3. Controller
4. Service Interface
5. Service Implementations
6. DAO Interface
7. DAO Implementations


5. 
1) @Controller
프레젠테이션 계층(컨트롤러 클래스)
@Controller는 주로 사용자의 요청을 받고, 해당 요청을 처리한 뒤, 적절한 뷰(view)를 반환하는 역할을 합니다. 
주로 웹 애플리케이션의 엔드포인트 역할을 하며, HTTP 요청을 받고 응답을 생성하는 데 사용됩니다.
주요 기능:
@RequestMapping, @GetMapping, @PostMapping과 함께 사용하여 특정 URL 요청을 특정 메서드에 매핑합니다.
모델 객체를 사용하여 뷰와 데이터를 공유합니다.
@RestController는 @Controller와 유사하나, 주로 RESTful 웹 서비스를 구축할 때 사용하며, 자동으로 JSON 형태의 응답을 반환합니다.

2) @Service
서비스 계층(비즈니스 로직을 처리하는 클래스)
@Service는 비즈니스 로직을 처리하는 계층에 사용됩니다. 이 계층에서는 데이터 처리를 위해 필요한 다양한 작업이 이루어지며, 주로 비즈니스 로직을 캡슐화하여 코드의 유지보수성을 높입니다.
주요 기능:
비즈니스 로직 처리: 컨트롤러로부터 요청을 받아 데이터를 가공하거나, 여러 DAO(데이터 접근 객체)를 조합하여 비즈니스 로직을 수행합니다.
@Transactional 어노테이션과 함께 사용하여 서비스 계층에서 데이터의 일관성을 보장하는 트랜잭션을 관리할 수 있습니다.

3) @Repository
데이터 접근 계층(DAO 클래스)
@Repository는 데이터베이스와의 직접적인 상호작용을 담당하는 계층에 사용됩니다. 이 계층에서는 주로 CRUD(Create, Read, Update, Delete) 작업이 이루어집니다.
주요 기능:
데이터베이스 예외 변환: @Repository는 데이터베이스 작업 중 발생하는 예외를 Spring의 DataAccessException으로 변환하여 예외 처리를 쉽게 만듭니다.
데이터 액세스 객체: 데이터베이스에서 데이터를 가져오거나 수정하는 역할을 수행합니다. 주로 JpaRepository 또는 CrudRepository를 상속하여 쉽게 CRUD 기능을 제공합니다.



6

 pom.xml은 간단히 말하면 Maven의 빌드 정보를 담고 있는 파일로, POM(Project Object Model)을 설정하는 부분으로 프로젝트 내 빌드 옵션을 설정하는 부분이다. 
 이것은 다른 프로젝트에도 복사-붙여넣기하면 되기 때문에 범용성이 좋고, 협업할때에 버전을 통일하기에 편리하다.

Maven의 정의
자바 프로젝트를 관리하는 툴로, 미리 작성된 xml 파일을 이용하여 라이브러리를 자동으로 다운로드하거나 프로젝트를 빌드해준다. 
즉, 자바 소스를 컴파일하고 패키지해서 deploy까지 자동화 해준다는 것이다.

pom.xml에 담겨 있는 정보
프로젝트명>target>pom.xml 파일을 열자.

<project> : Maven의 XML 네임스페이스를 지정
<modelVersion> : Maven의 model Version
<groupId> : 그룹 ID태그 
<artifactId> : 아티팩트ID 태그 
<version> : 버전명 태그
<packaging> 패키징 형식을 지정하는 태그
<name> : 프로젝트의 이름
<url> : Maven의 url
<properties> : 프로젝트 관련 속성
<parent> : pom.xml의 상속에 관련된 태그
<dependencies> : 프로젝트가 의존하는 라이브러리들의 정보

dependency는 프로젝트의 라이브러리를 정의하는 태그다. 

안에 들어가는 태그는 4가지
<groupId> : 라이브러리의 그룹 아이디
<artifactId> : 라이브러리의 아티팩트 아이디
<version> : 라이브러리의 버전
<scope> : 라이브러리가 프로젝트 내에서 사용되는 범위

7
어노테이션
@RequestParam
단일 요청 파라미터를 메소드의 파라미터로 바인딩
URL 쿼리 파라미터 또는 폼에서 단순 값 수집

@ModelAttribute
요청 데이터를 객체에 바인딩하고 모델에 추가
여러 요청 파라미터를 객체로 매핑하거나 폼 데이터를 객체로 받아올 때

@RequestParam은 단일 파라미터, @ModelAttribute는 객체 형태의 데이터를 바인딩할 때 적합

예시)
@GetMapping("/greeting")
public String greeting(@RequestParam("name") String name) {
    return "Hello, " + name;
}
GET /greeting?name=John -> name 파라미터가 John으로 매핑됩니다.


public String processForm(@ModelAttribute("user") User user) {
    return "User details: " + user.toString();
}
 POST /processForm (폼 데이터에 name=John&age=30) -> User 객체의 name과 age 필드가 바인딩됩니다.

8
1. "resources/upload/" + f_name
2. f_name, "UTF-8"
3. new FileInputStream(file)
4. response.getOutputStream()
5. in, out


9
1. @PostMapping
2. MultipartFile file
3. file.isEmpty()
4. UUID.randomUUID();
5. file.transferTo


10
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- spring-security 관련 -->
   <!-- id는 무조건 첫 글자 소문자 필수 -->
   <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
   
   </bean>
   		
</beans>

 web.xml 
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>		
		<param-value>
		/WEB-INF/spring/root-context.xml
		/WEB-INF/spring/mail-context.xml
		/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 한글설정 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class> org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 한글설정 END -->

	<!-- 시작페이지 설정 -->
	<welcome-file-list>		
		<welcome-file>/WEB-INF/views/index.jsp</welcome-file>		
	</welcome-file-list>

</web-app>
11
스케쥴러가 10초마다 실행되며 콘솔에 list 크기를 찍어준다


12
1. paging.setTotalRecord(count);

2. (paging.getTotalRecord() <= paging.getNumPerPage()

3. paging.setNowPage(1);

4. paging.setNowPage(Integer.parseInt(cPage));



13





14
요청과 응답을 가로채어 처리하는 기능을 제공하지만, 적용 시점과 주요 목적에 차이가 있습니다.

1. 필터 (Filter)
필터는 서블릿 컨테이너 레벨에서 동작하며, Spring Framework가 아닌 Servlet API에서 제공하는 기능입니다.
따라서, Spring 외의 Java 웹 애플리케이션에서도 사용될 수 있습니다.

@WebFilter(urlPatterns = "/*")
public class LoggingFilter implements Filter {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
            throws IOException, ServletException {
        // 요청 전 처리
        System.out.println("Request received");
        chain.doFilter(request, response);
        // 응답 후 처리
        System.out.println("Response sent");
    }
}

2. 인터셉터 (Interceptor)
인터셉터는 Spring MVC 레벨에서 동작하며, Spring의 HandlerInterceptor 인터페이스를 구현해 사용합니다. 
주로 Spring의 컨트롤러로 들어가는 요청과 그에 대한 응답을 가로채는 데 사용됩니다.

public class AuthenticationInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) 
            throws Exception {
        // 요청 전 처리 (예: 인증)
        System.out.println("Pre Handle logic");
        return true; // true면 다음 단계로 진행
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) 
            throws Exception {
        // 요청 후 처리 (예: 로깅)
        System.out.println("Post Handle logic");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) 
            throws Exception {
        // 뷰 렌더링 후 처리
        System.out.println("After Completion logic");
    }
}

필터는 서블릿 전반에 걸쳐 사용되고, 
인터셉터는 Spring MVC 내부에서 컨트롤러에 대한 작업을 전후로 처리하는 데 사용됩니다.